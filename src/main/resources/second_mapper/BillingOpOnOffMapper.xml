<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="com.xc.fast_deploy.dao.slave_dao.BillingOpOnOffMapper">
    <resultMap id="BaseResultMap" type="com.xc.fast_deploy.model.slave_model.BillingOpOnOff">
        <id column="id" property="id" jdbcType="INTEGER"/>
        <result column="is_able_next" property="isAbleNext" jdbcType="INTEGER"/>
        <result column="env_id" property="envId" jdbcType="INTEGER"/>
        <result column="env_code" property="envCode" jdbcType="VARCHAR"/>
        <result column="op_user_id" property="opUserId" jdbcType="VARCHAR"/>
        <result column="op_time" property="opTime" jdbcType="TIMESTAMP"/>
        <result column="hostnames" property="hostnames" jdbcType="LONGVARCHAR"/>
    </resultMap>
    <sql id="Example_Where_Clause">
        <where>
            <foreach collection="oredCriteria" item="criteria" separator="or">
                <if test="criteria.valid">
                    <trim prefix="(" suffix=")" prefixOverrides="and">
                        <foreach collection="criteria.criteria" item="criterion">
                            <choose>
                                <when test="criterion.noValue">
                                    and ${criterion.condition}
                                </when>
                                <when test="criterion.singleValue">
                                    and ${criterion.condition} #{criterion.value}
                                </when>
                                <when test="criterion.betweenValue">
                                    and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                                </when>
                                <when test="criterion.listValue">
                                    and ${criterion.condition}
                                    <foreach collection="criterion.value" item="listItem" open="(" close=")"
                                             separator=",">
                                        #{listItem}
                                    </foreach>
                                </when>
                            </choose>
                        </foreach>
                    </trim>
                </if>
            </foreach>
        </where>
    </sql>
    <sql id="Update_By_Example_Where_Clause">
        <where>
            <foreach collection="example.oredCriteria" item="criteria" separator="or">
                <if test="criteria.valid">
                    <trim prefix="(" suffix=")" prefixOverrides="and">
                        <foreach collection="criteria.criteria" item="criterion">
                            <choose>
                                <when test="criterion.noValue">
                                    and ${criterion.condition}
                                </when>
                                <when test="criterion.singleValue">
                                    and ${criterion.condition} #{criterion.value}
                                </when>
                                <when test="criterion.betweenValue">
                                    and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                                </when>
                                <when test="criterion.listValue">
                                    and ${criterion.condition}
                                    <foreach collection="criterion.value" item="listItem" open="(" close=")"
                                             separator=",">
                                        #{listItem}
                                    </foreach>
                                </when>
                            </choose>
                        </foreach>
                    </trim>
                </if>
            </foreach>
        </where>
    </sql>
    <sql id="Base_Column_List">
        id
        , is_able_next, env_id, env_code, op_user_id, op_time,hostnames
    </sql>
    <select id="selectByExample" resultMap="BaseResultMap"
            parameterType="com.xc.fast_deploy.model.slave_model.example.BillingOpOnOffExample">
        select
        <if test="distinct">
            distinct
        </if>
        'true' as QUERYID,
        <include refid="Base_Column_List"/>
        from billing_op_on_off
        <if test="_parameter != null">
            <include refid="Example_Where_Clause"/>
        </if>
        <if test="orderByClause != null">
            order by ${orderByClause}
        </if>
    </select>
    <select id="selectByPrimaryKey" resultMap="BaseResultMap" parameterType="java.lang.Integer">
        select
        <include refid="Base_Column_List"/>
        from billing_op_on_off
        where id = #{id,jdbcType=INTEGER}
    </select>
    <delete id="deleteByPrimaryKey" parameterType="java.lang.Integer">
        delete
        from billing_op_on_off
        where id = #{id,jdbcType=INTEGER}
    </delete>
    <delete id="deleteByExample" parameterType="com.xc.fast_deploy.model.slave_model.example.BillingOpOnOffExample">
        delete from billing_op_on_off
        <if test="_parameter != null">
            <include refid="Example_Where_Clause"/>
        </if>
    </delete>
    <insert id="insert" parameterType="com.xc.fast_deploy.model.slave_model.BillingOpOnOff">
        <selectKey resultType="java.lang.Integer" keyProperty="id" order="AFTER">
            SELECT LAST_INSERT_ID()
        </selectKey>
        insert into billing_op_on_off (is_able_next, env_id, env_code,
        op_user_id, op_time)
        values (#{isAbleNext,jdbcType=INTEGER}, #{envId,jdbcType=INTEGER}, #{envCode,jdbcType=VARCHAR},
        #{opUserId,jdbcType=VARCHAR}, #{opTime,jdbcType=TIMESTAMP})
    </insert>
    <insert id="insertSelective" parameterType="com.xc.fast_deploy.model.slave_model.BillingOpOnOff">
        <selectKey resultType="java.lang.Integer" keyProperty="id" order="AFTER">
            SELECT LAST_INSERT_ID()
        </selectKey>
        insert into billing_op_on_off
        <trim prefix="(" suffix=")" suffixOverrides=",">
            <if test="isAbleNext != null">
                is_able_next,
            </if>
            <if test="envId != null">
                env_id,
            </if>
            <if test="envCode != null">
                env_code,
            </if>
            <if test="opUserId != null">
                op_user_id,
            </if>
            <if test="opTime != null">
                op_time,
            </if>
        </trim>
        <trim prefix="values (" suffix=")" suffixOverrides=",">
            <if test="isAbleNext != null">
                #{isAbleNext,jdbcType=INTEGER},
            </if>
            <if test="envId != null">
                #{envId,jdbcType=INTEGER},
            </if>
            <if test="envCode != null">
                #{envCode,jdbcType=VARCHAR},
            </if>
            <if test="opUserId != null">
                #{opUserId,jdbcType=VARCHAR},
            </if>
            <if test="opTime != null">
                #{opTime,jdbcType=TIMESTAMP},
            </if>
        </trim>
    </insert>
    <select id="countByExample" parameterType="com.xc.fast_deploy.model.slave_model.example.BillingOpOnOffExample"
            resultType="java.lang.Integer">
        select count(*) from billing_op_on_off
        <if test="_parameter != null">
            <include refid="Example_Where_Clause"/>
        </if>
    </select>
    <update id="updateByExampleSelective" parameterType="map">
        update billing_op_on_off
        <set>
            <if test="record.id != null">
                id = #{record.id,jdbcType=INTEGER},
            </if>
            <if test="record.isAbleNext != null">
                is_able_next = #{record.isAbleNext,jdbcType=INTEGER},
            </if>
            <if test="record.envId != null">
                env_id = #{record.envId,jdbcType=INTEGER},
            </if>
            <if test="record.envCode != null">
                env_code = #{record.envCode,jdbcType=VARCHAR},
            </if>
            <if test="record.opUserId != null">
                op_user_id = #{record.opUserId,jdbcType=VARCHAR},
            </if>
            <if test="record.opTime != null">
                op_time = #{record.opTime,jdbcType=TIMESTAMP},
            </if>
        </set>
        <if test="_parameter != null">
            <include refid="Update_By_Example_Where_Clause"/>
        </if>
    </update>
    <update id="updateByExample" parameterType="map">
        update billing_op_on_off
        set id = #{record.id,jdbcType=INTEGER},
        is_able_next = #{record.isAbleNext,jdbcType=INTEGER},
        env_id = #{record.envId,jdbcType=INTEGER},
        env_code = #{record.envCode,jdbcType=VARCHAR},
        op_user_id = #{record.opUserId,jdbcType=VARCHAR},
        op_time = #{record.opTime,jdbcType=TIMESTAMP}
        <if test="_parameter != null">
            <include refid="Update_By_Example_Where_Clause"/>
        </if>
    </update>
    <update id="updateByPrimaryKeySelective" parameterType="com.xc.fast_deploy.model.slave_model.BillingOpOnOff">
        update billing_op_on_off
        <set>
            <if test="isAbleNext != null">
                is_able_next = #{isAbleNext,jdbcType=INTEGER},
            </if>
            <if test="envId != null">
                env_id = #{envId,jdbcType=INTEGER},
            </if>
            <if test="envCode != null">
                env_code = #{envCode,jdbcType=VARCHAR},
            </if>
            <if test="opUserId != null">
                op_user_id = #{opUserId,jdbcType=VARCHAR},
            </if>
            <if test="opTime != null">
                op_time = #{opTime,jdbcType=TIMESTAMP},
            </if>
        </set>
        where id = #{id,jdbcType=INTEGER}
    </update>

    <update id="updateByPrimaryKey" parameterType="com.xc.fast_deploy.model.slave_model.BillingOpOnOff">
        update billing_op_on_off
        set is_able_next = #{isAbleNext,jdbcType=INTEGER},
            env_id       = #{envId,jdbcType=INTEGER},
            env_code     = #{envCode,jdbcType=VARCHAR},
            op_user_id   = #{opUserId,jdbcType=VARCHAR},
            op_time      = #{opTime,jdbcType=TIMESTAMP}
        where id = #{id,jdbcType=INTEGER}
    </update>

    <!--self add-->
    <select id="selectAll" resultType="com.xc.fast_deploy.model.slave_model.BillingOpOnOff">
        SELECT a.id, a.env_id AS envId, a.is_prod AS isProd
        FROM billing_op_on_off a
    </select>

    <select id="selectByEnvId" parameterType="java.lang.Integer"
            resultType="com.xc.fast_deploy.model.slave_model.BillingOpOnOff">
        SELECT id, hostnames, env_id AS envId, env_code AS envCode, is_able_next as isAbleNext
        FROM billing_op_on_off
        WHERE env_id = #{envId,jdbcType=VARCHAR}
    </select>

    <update id="updateHostNamesByEnvId"
            parameterType="com.xc.fast_deploy.model.slave_model.BillingOpOnOff">
        update billing_op_on_off
        set hostnames = #{hostnames,jdbcType=LONGVARCHAR}
        where id = #{id,jdbcType=INTEGER}
    </update>
</mapper>